#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace B2B
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="B2B_dev_Fabio")]
	public partial class MappingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccomodation(Accomodation instance);
    partial void UpdateAccomodation(Accomodation instance);
    partial void DeleteAccomodation(Accomodation instance);
    partial void InsertAccessory(Accessory instance);
    partial void UpdateAccessory(Accessory instance);
    partial void DeleteAccessory(Accessory instance);
    partial void InsertOrderServiceAlloc(OrderServiceAlloc instance);
    partial void UpdateOrderServiceAlloc(OrderServiceAlloc instance);
    partial void DeleteOrderServiceAlloc(OrderServiceAlloc instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertVoucher(Voucher instance);
    partial void UpdateVoucher(Voucher instance);
    partial void DeleteVoucher(Voucher instance);
    partial void InsertEmployment(Employment instance);
    partial void UpdateEmployment(Employment instance);
    partial void DeleteEmployment(Employment instance);
    partial void InsertHost(Host instance);
    partial void UpdateHost(Host instance);
    partial void DeleteHost(Host instance);
    partial void InsertRoomAccessoryAlloc(RoomAccessoryAlloc instance);
    partial void UpdateRoomAccessoryAlloc(RoomAccessoryAlloc instance);
    partial void DeleteRoomAccessoryAlloc(RoomAccessoryAlloc instance);
    partial void InsertPriceListGroup(PriceListGroup instance);
    partial void UpdatePriceListGroup(PriceListGroup instance);
    partial void DeletePriceListGroup(PriceListGroup instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    #endregion
		
		public MappingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MappingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MappingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MappingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Accomodation> Accomodations
		{
			get
			{
				return this.GetTable<Accomodation>();
			}
		}
		
		public System.Data.Linq.Table<Accessory> Accessories
		{
			get
			{
				return this.GetTable<Accessory>();
			}
		}
		
		public System.Data.Linq.Table<OrderServiceAlloc> OrderServiceAllocs
		{
			get
			{
				return this.GetTable<OrderServiceAlloc>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Voucher> Vouchers
		{
			get
			{
				return this.GetTable<Voucher>();
			}
		}
		
		public System.Data.Linq.Table<Employment> Employments
		{
			get
			{
				return this.GetTable<Employment>();
			}
		}
		
		public System.Data.Linq.Table<Host> Hosts
		{
			get
			{
				return this.GetTable<Host>();
			}
		}
		
		public System.Data.Linq.Table<RoomAccessoryAlloc> RoomAccessoryAllocs
		{
			get
			{
				return this.GetTable<RoomAccessoryAlloc>();
			}
		}
		
		public System.Data.Linq.Table<PriceListGroup> PriceListGroups
		{
			get
			{
				return this.GetTable<PriceListGroup>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accomodation")]
	public partial class Accomodation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private string _Image;
		
		private EntitySet<Room> _Rooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public Accomodation()
		{
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accomodation_Room", Storage="_Rooms", ThisKey="Id", OtherKey="TypeId")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Accomodation = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Accomodation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accessory")]
	public partial class Accessory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private string _Image;
		
		private EntitySet<RoomAccessoryAlloc> _RoomAccessoryAllocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public Accessory()
		{
			this._RoomAccessoryAllocs = new EntitySet<RoomAccessoryAlloc>(new Action<RoomAccessoryAlloc>(this.attach_RoomAccessoryAllocs), new Action<RoomAccessoryAlloc>(this.detach_RoomAccessoryAllocs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accessory_RoomAccessoryAlloc", Storage="_RoomAccessoryAllocs", ThisKey="Id", OtherKey="AccessoryId")]
		public EntitySet<RoomAccessoryAlloc> RoomAccessoryAllocs
		{
			get
			{
				return this._RoomAccessoryAllocs;
			}
			set
			{
				this._RoomAccessoryAllocs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoomAccessoryAllocs(RoomAccessoryAlloc entity)
		{
			this.SendPropertyChanging();
			entity.Accessory = this;
		}
		
		private void detach_RoomAccessoryAllocs(RoomAccessoryAlloc entity)
		{
			this.SendPropertyChanging();
			entity.Accessory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderServiceAlloc")]
	public partial class OrderServiceAlloc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _OrderId;
		
		private System.Nullable<int> _ServiceId;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<double> _Amount;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrderIdChanging(System.Nullable<int> value);
    partial void OnOrderIdChanged();
    partial void OnServiceIdChanging(System.Nullable<int> value);
    partial void OnServiceIdChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    #endregion
		
		public OrderServiceAlloc()
		{
			this._Order = default(EntityRef<Order>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
		public System.Nullable<int> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", DbType="Int")]
		public System.Nullable<int> ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderServiceAlloc", Storage="_Order", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderServiceAllocs.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderServiceAllocs.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_OrderServiceAlloc", Storage="_Service", ThisKey="ServiceId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.OrderServiceAllocs.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.OrderServiceAllocs.Add(this);
						this._ServiceId = value.Id;
					}
					else
					{
						this._ServiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _OrderId;
		
		private System.Nullable<System.DateTime> _DateOfPay;
		
		private System.Nullable<double> _Amount;
		
		private string _PaypalTransitionID;
		
		private string _Note;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrderIdChanging(System.Nullable<int> value);
    partial void OnOrderIdChanged();
    partial void OnDateOfPayChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfPayChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnPaypalTransitionIDChanging(string value);
    partial void OnPaypalTransitionIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Payment()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
		public System.Nullable<int> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfPay", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfPay
		{
			get
			{
				return this._DateOfPay;
			}
			set
			{
				if ((this._DateOfPay != value))
				{
					this.OnDateOfPayChanging(value);
					this.SendPropertyChanging();
					this._DateOfPay = value;
					this.SendPropertyChanged("DateOfPay");
					this.OnDateOfPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaypalTransitionID", DbType="VarChar(50)")]
		public string PaypalTransitionID
		{
			get
			{
				return this._PaypalTransitionID;
			}
			set
			{
				if ((this._PaypalTransitionID != value))
				{
					this.OnPaypalTransitionIDChanging(value);
					this.SendPropertyChanging();
					this._PaypalTransitionID = value;
					this.SendPropertyChanged("PaypalTransitionID");
					this.OnPaypalTransitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_Order", Storage="_Orders", ThisKey="Id", OtherKey="PaymentId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Payment = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Payment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _HostId;
		
		private int _RoomId;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<int> _NumberOfGuests;
		
		private System.Nullable<int> _VoucherId;
		
		private System.Nullable<double> _TotalAmount;
		
		private System.Nullable<int> _PaymentId;
		
		private System.Nullable<int> _EmploymentId;
		
		private System.Nullable<int> _Status;
		
		private string _note;
		
		private EntitySet<OrderServiceAlloc> _OrderServiceAllocs;
		
		private EntityRef<Payment> _Payment;
		
		private EntityRef<Voucher> _Voucher;
		
		private EntityRef<Host> _Host;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnHostIdChanging(int value);
    partial void OnHostIdChanged();
    partial void OnRoomIdChanging(int value);
    partial void OnRoomIdChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnNumberOfGuestsChanging(System.Nullable<int> value);
    partial void OnNumberOfGuestsChanged();
    partial void OnVoucherIdChanging(System.Nullable<int> value);
    partial void OnVoucherIdChanged();
    partial void OnTotalAmountChanging(System.Nullable<double> value);
    partial void OnTotalAmountChanged();
    partial void OnPaymentIdChanging(System.Nullable<int> value);
    partial void OnPaymentIdChanged();
    partial void OnEmploymentIdChanging(System.Nullable<int> value);
    partial void OnEmploymentIdChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    #endregion
		
		public Order()
		{
			this._OrderServiceAllocs = new EntitySet<OrderServiceAlloc>(new Action<OrderServiceAlloc>(this.attach_OrderServiceAllocs), new Action<OrderServiceAlloc>(this.detach_OrderServiceAllocs));
			this._Payment = default(EntityRef<Payment>);
			this._Voucher = default(EntityRef<Voucher>);
			this._Host = default(EntityRef<Host>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostId", DbType="Int NOT NULL")]
		public int HostId
		{
			get
			{
				return this._HostId;
			}
			set
			{
				if ((this._HostId != value))
				{
					if (this._Host.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHostIdChanging(value);
					this.SendPropertyChanging();
					this._HostId = value;
					this.SendPropertyChanged("HostId");
					this.OnHostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this.OnRoomIdChanging(value);
					this.SendPropertyChanging();
					this._RoomId = value;
					this.SendPropertyChanged("RoomId");
					this.OnRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfGuests", DbType="Int")]
		public System.Nullable<int> NumberOfGuests
		{
			get
			{
				return this._NumberOfGuests;
			}
			set
			{
				if ((this._NumberOfGuests != value))
				{
					this.OnNumberOfGuestsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfGuests = value;
					this.SendPropertyChanged("NumberOfGuests");
					this.OnNumberOfGuestsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoucherId", DbType="Int")]
		public System.Nullable<int> VoucherId
		{
			get
			{
				return this._VoucherId;
			}
			set
			{
				if ((this._VoucherId != value))
				{
					if (this._Voucher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoucherIdChanging(value);
					this.SendPropertyChanging();
					this._VoucherId = value;
					this.SendPropertyChanged("VoucherId");
					this.OnVoucherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Float")]
		public System.Nullable<double> TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentId", DbType="Int")]
		public System.Nullable<int> PaymentId
		{
			get
			{
				return this._PaymentId;
			}
			set
			{
				if ((this._PaymentId != value))
				{
					if (this._Payment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentId = value;
					this.SendPropertyChanged("PaymentId");
					this.OnPaymentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmploymentId", DbType="Int")]
		public System.Nullable<int> EmploymentId
		{
			get
			{
				return this._EmploymentId;
			}
			set
			{
				if ((this._EmploymentId != value))
				{
					this.OnEmploymentIdChanging(value);
					this.SendPropertyChanging();
					this._EmploymentId = value;
					this.SendPropertyChanged("EmploymentId");
					this.OnEmploymentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="VarChar(MAX)")]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderServiceAlloc", Storage="_OrderServiceAllocs", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<OrderServiceAlloc> OrderServiceAllocs
		{
			get
			{
				return this._OrderServiceAllocs;
			}
			set
			{
				this._OrderServiceAllocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_Order", Storage="_Payment", ThisKey="PaymentId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Payment Payment
		{
			get
			{
				return this._Payment.Entity;
			}
			set
			{
				Payment previousValue = this._Payment.Entity;
				if (((previousValue != value) 
							|| (this._Payment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payment.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Payment.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._PaymentId = value.Id;
					}
					else
					{
						this._PaymentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Payment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_Order", Storage="_Voucher", ThisKey="VoucherId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Voucher Voucher
		{
			get
			{
				return this._Voucher.Entity;
			}
			set
			{
				Voucher previousValue = this._Voucher.Entity;
				if (((previousValue != value) 
							|| (this._Voucher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voucher.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Voucher.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._VoucherId = value.Id;
					}
					else
					{
						this._VoucherId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Voucher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Host_Order", Storage="_Host", ThisKey="HostId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Host Host
		{
			get
			{
				return this._Host.Entity;
			}
			set
			{
				Host previousValue = this._Host.Entity;
				if (((previousValue != value) 
							|| (this._Host.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Host.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Host.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._HostId = value.Id;
					}
					else
					{
						this._HostId = default(int);
					}
					this.SendPropertyChanged("Host");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderServiceAllocs(OrderServiceAlloc entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderServiceAllocs(OrderServiceAlloc entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Voucher")]
	public partial class Voucher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _Amount;
		
		private string _SerialNumberGenerator;
		
		private string _Note;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnSerialNumberGeneratorChanging(string value);
    partial void OnSerialNumberGeneratorChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Voucher()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumberGenerator", DbType="VarChar(50)")]
		public string SerialNumberGenerator
		{
			get
			{
				return this._SerialNumberGenerator;
			}
			set
			{
				if ((this._SerialNumberGenerator != value))
				{
					this.OnSerialNumberGeneratorChanging(value);
					this.SendPropertyChanging();
					this._SerialNumberGenerator = value;
					this.SendPropertyChanged("SerialNumberGenerator");
					this.OnSerialNumberGeneratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_Order", Storage="_Orders", ThisKey="Id", OtherKey="VoucherId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employment")]
	public partial class Employment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Surname;
		
		private string _MobilePhone;
		
		private string _Note;
		
		private string _Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Employment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="VarChar(50)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Host")]
	public partial class Host : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Mobile;
		
		private string _Phone;
		
		private string _Email;
		
		private System.Nullable<bool> _IsB2BStaff;
		
		private string _Note;
		
		private string _Password;
		
		private string _ResetToken;
		
		private System.Nullable<System.DateTime> _ResetTokenExpiry;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Room> _Rooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIsB2BStaffChanging(System.Nullable<bool> value);
    partial void OnIsB2BStaffChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnResetTokenChanging(string value);
    partial void OnResetTokenChanged();
    partial void OnResetTokenExpiryChanging(System.Nullable<System.DateTime> value);
    partial void OnResetTokenExpiryChanged();
    #endregion
		
		public Host()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="VarChar(50)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsB2BStaff", DbType="Bit")]
		public System.Nullable<bool> IsB2BStaff
		{
			get
			{
				return this._IsB2BStaff;
			}
			set
			{
				if ((this._IsB2BStaff != value))
				{
					this.OnIsB2BStaffChanging(value);
					this.SendPropertyChanging();
					this._IsB2BStaff = value;
					this.SendPropertyChanged("IsB2BStaff");
					this.OnIsB2BStaffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(255)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(255)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResetToken", DbType="VarChar(MAX)")]
		public string ResetToken
		{
			get
			{
				return this._ResetToken;
			}
			set
			{
				if ((this._ResetToken != value))
				{
					this.OnResetTokenChanging(value);
					this.SendPropertyChanging();
					this._ResetToken = value;
					this.SendPropertyChanged("ResetToken");
					this.OnResetTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResetTokenExpiry", DbType="DateTime")]
		public System.Nullable<System.DateTime> ResetTokenExpiry
		{
			get
			{
				return this._ResetTokenExpiry;
			}
			set
			{
				if ((this._ResetTokenExpiry != value))
				{
					this.OnResetTokenExpiryChanging(value);
					this.SendPropertyChanging();
					this._ResetTokenExpiry = value;
					this.SendPropertyChanged("ResetTokenExpiry");
					this.OnResetTokenExpiryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Host_Order", Storage="_Orders", ThisKey="Id", OtherKey="HostId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Host_Room", Storage="_Rooms", ThisKey="Id", OtherKey="HostId")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Host = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Host = null;
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Host = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Host = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomAccessoryAlloc")]
	public partial class RoomAccessoryAlloc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _RoomId;
		
		private System.Nullable<int> _AccessoryId;
		
		private System.Nullable<int> _Quantity;
		
		private EntityRef<Accessory> _Accessory;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRoomIdChanging(System.Nullable<int> value);
    partial void OnRoomIdChanged();
    partial void OnAccessoryIdChanging(System.Nullable<int> value);
    partial void OnAccessoryIdChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public RoomAccessoryAlloc()
		{
			this._Accessory = default(EntityRef<Accessory>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int")]
		public System.Nullable<int> RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIdChanging(value);
					this.SendPropertyChanging();
					this._RoomId = value;
					this.SendPropertyChanged("RoomId");
					this.OnRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessoryId", DbType="Int")]
		public System.Nullable<int> AccessoryId
		{
			get
			{
				return this._AccessoryId;
			}
			set
			{
				if ((this._AccessoryId != value))
				{
					if (this._Accessory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessoryIdChanging(value);
					this.SendPropertyChanging();
					this._AccessoryId = value;
					this.SendPropertyChanged("AccessoryId");
					this.OnAccessoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accessory_RoomAccessoryAlloc", Storage="_Accessory", ThisKey="AccessoryId", OtherKey="Id", IsForeignKey=true)]
		public Accessory Accessory
		{
			get
			{
				return this._Accessory.Entity;
			}
			set
			{
				Accessory previousValue = this._Accessory.Entity;
				if (((previousValue != value) 
							|| (this._Accessory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Accessory.Entity = null;
						previousValue.RoomAccessoryAllocs.Remove(this);
					}
					this._Accessory.Entity = value;
					if ((value != null))
					{
						value.RoomAccessoryAllocs.Add(this);
						this._AccessoryId = value.Id;
					}
					else
					{
						this._AccessoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Accessory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_RoomAccessoryAlloc", Storage="_Room", ThisKey="RoomId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.RoomAccessoryAllocs.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.RoomAccessoryAllocs.Add(this);
						this._RoomId = value.Id;
					}
					else
					{
						this._RoomId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PriceListGroup")]
	public partial class PriceListGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _DescriptionShort;
		
		private System.Nullable<double> _Percentuale;
		
		private EntitySet<Room> _Rooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionShortChanging(string value);
    partial void OnDescriptionShortChanged();
    partial void OnPercentualeChanging(System.Nullable<double> value);
    partial void OnPercentualeChanged();
    #endregion
		
		public PriceListGroup()
		{
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionShort", DbType="VarChar(MAX)")]
		public string DescriptionShort
		{
			get
			{
				return this._DescriptionShort;
			}
			set
			{
				if ((this._DescriptionShort != value))
				{
					this.OnDescriptionShortChanging(value);
					this.SendPropertyChanging();
					this._DescriptionShort = value;
					this.SendPropertyChanged("DescriptionShort");
					this.OnDescriptionShortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Percentuale", DbType="Float")]
		public System.Nullable<double> Percentuale
		{
			get
			{
				return this._Percentuale;
			}
			set
			{
				if ((this._Percentuale != value))
				{
					this.OnPercentualeChanging(value);
					this.SendPropertyChanging();
					this._Percentuale = value;
					this.SendPropertyChanged("Percentuale");
					this.OnPercentualeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceListGroup_Room", Storage="_Rooms", ThisKey="Id", OtherKey="PriceListGroupId")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.PriceListGroup = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.PriceListGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _DescriptionShort;
		
		private string _DescriptionLong;
		
		private string _Image;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<bool> _HavePriceGroup;
		
		private EntitySet<OrderServiceAlloc> _OrderServiceAllocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionShortChanging(string value);
    partial void OnDescriptionShortChanged();
    partial void OnDescriptionLongChanging(string value);
    partial void OnDescriptionLongChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnHavePriceGroupChanging(System.Nullable<bool> value);
    partial void OnHavePriceGroupChanged();
    #endregion
		
		public Service()
		{
			this._OrderServiceAllocs = new EntitySet<OrderServiceAlloc>(new Action<OrderServiceAlloc>(this.attach_OrderServiceAllocs), new Action<OrderServiceAlloc>(this.detach_OrderServiceAllocs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionShort", DbType="VarChar(50)")]
		public string DescriptionShort
		{
			get
			{
				return this._DescriptionShort;
			}
			set
			{
				if ((this._DescriptionShort != value))
				{
					this.OnDescriptionShortChanging(value);
					this.SendPropertyChanging();
					this._DescriptionShort = value;
					this.SendPropertyChanged("DescriptionShort");
					this.OnDescriptionShortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionLong", DbType="VarChar(MAX)")]
		public string DescriptionLong
		{
			get
			{
				return this._DescriptionLong;
			}
			set
			{
				if ((this._DescriptionLong != value))
				{
					this.OnDescriptionLongChanging(value);
					this.SendPropertyChanging();
					this._DescriptionLong = value;
					this.SendPropertyChanged("DescriptionLong");
					this.OnDescriptionLongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HavePriceGroup", DbType="Bit")]
		public System.Nullable<bool> HavePriceGroup
		{
			get
			{
				return this._HavePriceGroup;
			}
			set
			{
				if ((this._HavePriceGroup != value))
				{
					this.OnHavePriceGroupChanging(value);
					this.SendPropertyChanging();
					this._HavePriceGroup = value;
					this.SendPropertyChanged("HavePriceGroup");
					this.OnHavePriceGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_OrderServiceAlloc", Storage="_OrderServiceAllocs", ThisKey="Id", OtherKey="ServiceId")]
		public EntitySet<OrderServiceAlloc> OrderServiceAllocs
		{
			get
			{
				return this._OrderServiceAllocs;
			}
			set
			{
				this._OrderServiceAllocs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderServiceAllocs(OrderServiceAlloc entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_OrderServiceAllocs(OrderServiceAlloc entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _HostId;
		
		private System.Nullable<int> _TypeId;
		
		private string _Address;
		
		private string _StairCases;
		
		private string _Floor;
		
		private System.Nullable<bool> _Lift;
		
		private System.Nullable<int> _Status;
		
		private string _Note;
		
		private System.Nullable<int> _PriceListGroupId;
		
		private EntitySet<RoomAccessoryAlloc> _RoomAccessoryAllocs;
		
		private EntityRef<Accomodation> _Accomodation;
		
		private EntityRef<Host> _Host;
		
		private EntityRef<PriceListGroup> _PriceListGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnHostIdChanging(System.Nullable<int> value);
    partial void OnHostIdChanged();
    partial void OnTypeIdChanging(System.Nullable<int> value);
    partial void OnTypeIdChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnStairCasesChanging(string value);
    partial void OnStairCasesChanged();
    partial void OnFloorChanging(string value);
    partial void OnFloorChanged();
    partial void OnLiftChanging(System.Nullable<bool> value);
    partial void OnLiftChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnPriceListGroupIdChanging(System.Nullable<int> value);
    partial void OnPriceListGroupIdChanged();
    #endregion
		
		public Room()
		{
			this._RoomAccessoryAllocs = new EntitySet<RoomAccessoryAlloc>(new Action<RoomAccessoryAlloc>(this.attach_RoomAccessoryAllocs), new Action<RoomAccessoryAlloc>(this.detach_RoomAccessoryAllocs));
			this._Accomodation = default(EntityRef<Accomodation>);
			this._Host = default(EntityRef<Host>);
			this._PriceListGroup = default(EntityRef<PriceListGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostId", DbType="Int")]
		public System.Nullable<int> HostId
		{
			get
			{
				return this._HostId;
			}
			set
			{
				if ((this._HostId != value))
				{
					if (this._Host.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHostIdChanging(value);
					this.SendPropertyChanging();
					this._HostId = value;
					this.SendPropertyChanged("HostId");
					this.OnHostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int")]
		public System.Nullable<int> TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._Accomodation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StairCases", DbType="VarChar(50)")]
		public string StairCases
		{
			get
			{
				return this._StairCases;
			}
			set
			{
				if ((this._StairCases != value))
				{
					this.OnStairCasesChanging(value);
					this.SendPropertyChanging();
					this._StairCases = value;
					this.SendPropertyChanged("StairCases");
					this.OnStairCasesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floor", DbType="VarChar(50)")]
		public string Floor
		{
			get
			{
				return this._Floor;
			}
			set
			{
				if ((this._Floor != value))
				{
					this.OnFloorChanging(value);
					this.SendPropertyChanging();
					this._Floor = value;
					this.SendPropertyChanged("Floor");
					this.OnFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lift", DbType="Bit")]
		public System.Nullable<bool> Lift
		{
			get
			{
				return this._Lift;
			}
			set
			{
				if ((this._Lift != value))
				{
					this.OnLiftChanging(value);
					this.SendPropertyChanging();
					this._Lift = value;
					this.SendPropertyChanged("Lift");
					this.OnLiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceListGroupId", DbType="Int")]
		public System.Nullable<int> PriceListGroupId
		{
			get
			{
				return this._PriceListGroupId;
			}
			set
			{
				if ((this._PriceListGroupId != value))
				{
					if (this._PriceListGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceListGroupIdChanging(value);
					this.SendPropertyChanging();
					this._PriceListGroupId = value;
					this.SendPropertyChanged("PriceListGroupId");
					this.OnPriceListGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_RoomAccessoryAlloc", Storage="_RoomAccessoryAllocs", ThisKey="Id", OtherKey="RoomId")]
		public EntitySet<RoomAccessoryAlloc> RoomAccessoryAllocs
		{
			get
			{
				return this._RoomAccessoryAllocs;
			}
			set
			{
				this._RoomAccessoryAllocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accomodation_Room", Storage="_Accomodation", ThisKey="TypeId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Accomodation Accomodation
		{
			get
			{
				return this._Accomodation.Entity;
			}
			set
			{
				Accomodation previousValue = this._Accomodation.Entity;
				if (((previousValue != value) 
							|| (this._Accomodation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Accomodation.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._Accomodation.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._TypeId = value.Id;
					}
					else
					{
						this._TypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Accomodation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Host_Room", Storage="_Host", ThisKey="HostId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Host Host
		{
			get
			{
				return this._Host.Entity;
			}
			set
			{
				Host previousValue = this._Host.Entity;
				if (((previousValue != value) 
							|| (this._Host.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Host.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._Host.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._HostId = value.Id;
					}
					else
					{
						this._HostId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Host");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceListGroup_Room", Storage="_PriceListGroup", ThisKey="PriceListGroupId", OtherKey="Id", IsForeignKey=true)]
		public PriceListGroup PriceListGroup
		{
			get
			{
				return this._PriceListGroup.Entity;
			}
			set
			{
				PriceListGroup previousValue = this._PriceListGroup.Entity;
				if (((previousValue != value) 
							|| (this._PriceListGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PriceListGroup.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._PriceListGroup.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._PriceListGroupId = value.Id;
					}
					else
					{
						this._PriceListGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PriceListGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoomAccessoryAllocs(RoomAccessoryAlloc entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_RoomAccessoryAllocs(RoomAccessoryAlloc entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
}
#pragma warning restore 1591
